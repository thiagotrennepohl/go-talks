Cesusc Gophers
Encontro 1 - Lógica e introdução a linguagem

Thiago Trennepohl

* Agenda

- Sobre a linguagem
- Hello World
- Semelhanças com outras linguagens
- Variáveis e Ponteiros
- Structs
- Funções e Retornos
- Interfaces
- Slices
- Loops


* Sobre a linguagem

Go é uma liguagem de programação open source que nasceu no Google.
É uma linguagem tipada e compilada, diferente de javascript e python que são interpretados.
Go nasceu com o objetivo de resolver alguns problemas da computação moderna, a principal dela a concorrência.


* Hello World

Começaremos com o clássico Hello World

.image cheap.png

* Hello World

.code ../sample_codes/helloworld.go


* Semelhanças com outras linguagens - If

Go:

  if true {
    fmt.Println("Verdadeiro!")
  }

Python:
  
  if(True):
    print("Verdadeiro!")

Java: 
  
  public class Teste {
    public static void main(String []args){
      if(true){
        System.out.println("Verdadeiro");
      }
    }
  }

* Semelhanças com outras linguagens - For

Go: 

  for index,value := range colecao {
    fmt.Println(index, value)
  }

Python:
  
  for v in range(colecao):
    fmt.Println(v)

Java:
  
  for(int i : colecao) {
    System.out.println(i)
  }


* Variáveis e Ponteiros

Mas também é possível declarar uma variável já com valor. ou com o seu *zero value*

 minhaVariavelInteira := 0

* Variáveis e Ponteiros

Entretanto, assim como o C, C++, C#, Ada e outras, Go também tem pointeiros

Basicamente, pointeiros são variáveis que possuem um endereço de memória.

Estes endereços de memória, geralmente são referências a outras variáveis já alocadas na memória.

* Variáveis e Ponteiros

.code ../sample_codes/pointers.go

  Joao
  0xc4200801c0

* Variáveis e Ponteiros

  calculaImpostoDeRenda(&minhaRenda)

* Variáveis e Ponteiros

  func calculaImpostoDeRenda(renda *int){
    //faz calculos
  }

* Structs

Ah, mas então Go não é orientado a objetos né?

Não é Herança que torna uma linguagem orientada a objeto, mas a qualidade da abstração aplicada pelo desenvolvedor.

* Structs

Com structs é possível fazer muitas coisas, como:

 - Tipos (sim da mesma forma que no Java)
 - Métodos (sim da mesma forma que no Java)
 - Implementação de interfaces (sim da mesma forma que no Java)
 - Polimorfismo (Sim da mesma forma que no Java)

* Structs

  type Pessoa struct {
    Nome string
    Idade int
    Cpf int
    Telefone string
    Endereco string
  }

  joaozinho := Pessoa{}

  mariazinha := Pessoa{
    Nome: "Maria da Silva Sauro",
    Idade: 19,
    Cpf: 123456789,
    Telefone: "554899854214",
    Endereco: "Gopher street, numero 2008",
  }

  fmt.Println(joaozinho)
  fmt.Println(mariazinha)

* Structs

Ah, mas java tu pode falar quais atributos são publico e quais são privados

Em go também!

  type Pessoa struct {
    Nome string //Primeira letra maíuscula é público
    sobrenome string //Primeira letra minúscula é privada
  }

* Structs

Ah e os métodos?

  type Pessoa struct {
    Nome string //Primeira letra maíuscula é público
    sobrenome string //Primeira letra minúscula é privada
  }

  func (p *Pessoa) ImprimeSobrenome() {
    fmt.Println(p.sobrenome)
  }

  joaozinho := Pessoa{"Joao", "Silva"}
  joaoinho.ImprimeSobrenome()

 
* Funcoes

Digamos então, que o tipo Pessoa que criamos tem métodos que calcula o imposto de renda.

 func (p *Pessoa) CalculaImpostoDeRenda(renda int) int {
   //faz calculos
   return 0
 }

Mas perai, para eu calcular a renda, o parametro *renda* não pode ser 0
 
 Bom, neste caso uma boa prática é retornar dois valores:
 - O valor que você espera 
 - E um erro
 Nossa função ficaria assim:

 func (p *Pessoa) CalculaImpostoDeRenda(renda int) (int, error) {
   if renda <= 0 {
     return 0, fmt.Errorf("Hey eu esperava que você mandasse um valor válido, mas eu recebi %d", renda)
   }
   calculo := renda / 100 //calculo ficticio
   reutrn calculo, nil
 }

* Funcoes

E nós a chamariamos desta forma:

 joaozinho := Pessoa{"Joao"}

 resultado, erro := joaozinho.CalculaImpostoDeRenda(0)
 if erro != nil {
   panic(erro)
 }

* Considerações Finais

Livros:
 - Go em ação
 - Programando em Go (Casa do código)

Youtube:
 - Just for func (https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw)
 - https://gophercises.com/

Probleminhas:
 - codefights.com









