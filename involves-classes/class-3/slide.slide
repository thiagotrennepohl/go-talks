Involves Gophers
Encontro 3 - Desafios, Structs, Pacotes e Encapsulamento


* Agenda

- Correção exercícios
- Repeteco
- Desafio do Trem
- Structs
- Encapsulamento
- Pacotes
- Exercícios


* Desafio do Trem

Existe uma rua que cruza por um trilho de trem. Dos dois lados da rua existem cancelas que indicam quando o trem está vindo ou não(de ambos lados).
Assim que o primeiro vagão do trem cruza o primeiro sensor, as cancelas fecham a passagem da rua e os sinais sonoros são ativados,
e quando não há mais nada passando no segundo sensor, as cancelas abrem novamente e os sinais sonoros são desativados.
Cada vagão do trem demora 1 segundo para passar de um sensor ao outro, e o tem tem 15 vagões.

Usando loops e estruturas de decisão, crie um algoritmo que represente o cenário acima.


* Structs

São coleções de dados agrupados, com structs você consegue criar outros tipos de variáveis.

  type Trem struct{
      Vagoes int
  }

  trem Trem = Trem{Vagoes:15}
  
  fmt.Println(trem.Vagoes)



* Pacotes

Em go podemos ter outros pacotes em nosso programa.
Cirem uma pasta chamada trem em seguinda um arquivo chamado trem.go
dentro deste arquivo coloquem o seguinte:

  package trem

  type Trem struct{
      Vagoes int
      maquinista string
  }

* Pacotes

Agora no main.go vamos criar uma variavel do tipo Trem.

  trem    Trem    = Trem{15, "Zé"}

* Pacotes & Encapsulamento

Não é possível, pois o atributo Maquinista é privado do pacote tipo e pacote trem
As funções e Atributos são reconhecidos Publico quando a primeira letra é maiuscula.
No caso do atributo maquinista teremos que criar uma função publica do tipo trem para atribuir um nome ao maquinista.

  func (t *Trem) SetMaquinistaName(name string) {
      	t.maquinista = name
        fmt.Println("O nome do maquinista é " + t.maquinista)
    }

* Exercícios

Crie um programa para calculo de médias, mas utilize uma struct para representar o aluno 
e também crie funcções do tipo Aluno (ou do tipo que você desejar) para realizar os calculos de média.


