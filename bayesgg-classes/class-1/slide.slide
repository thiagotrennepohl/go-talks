Bayesgg Gophers
1st meeting - Golang and Programming intro

Thiago Trennepohl

* Agenda

- Why Golang & What are we going to learn?
- Golang setup
- Basic algorithms
- Exercises

* Disclaimer

Broken english ahead!

* Course duration

- 5 weeks for the basics
- Unlimited for careers and building systems

* Why Golang?
Golang is easy to learn, easy to code and easy to solve real world problems

Also golang COC (Code of conduct) is amazing!

* Go community COC

- Be friendly and welcoming
- Be patient
- Be thoughtful
- Be respectful
- Be charitable
- Interpret the arguments of others in good faith, do not seek to disagree.
- Avoid destructive behavior

* Go community COC

Checkout the full doc at https://golang.org/conduct

* What are we going to learn?

- Basics of programming logic
- Types and variables 
- Decision Structures
- Logic Operators
- Vectors and Matrixes
- Functions (not f(x)=something)
- How to build bots
- How to build simple systems

* Golang setup

1 - Install golang
2 - Setup GOPATH and folders
2 - Install visual studio code

* What are algorithms?

Algorithms are steps/rules set in a logic order aiming to solve a problem.

* What are algorithms?

How different is the previous statement to a cake recipe? the problem?

.image img/cake.jpg 400 600

* What are algorithms
- Step 1 - Preheat oven to 350F
- Step 2 - In the bowl of a stand mixer (or in a large bowl using an electric mixer) cream together the butter.
- Step 3 - ...
- Last step - eat the whole cake alone.

* How would you do to change a car tire?

* I'd do like this
1 - Get the spare tire
2 - Get the Jack (Auto-Affe) 
3 - Put the jack under the car
4 - Loose the screws
5 - Lift the car
6 - Change the tire
7 - Lower the car
8 - Tighten the screws
9 - Put back the flat tire and jack into the trunk
10 - Be happy

* What about a sum?

.image img/algorithm.png 580 600

* Coding time

* In which order the code is executed?

  func main() {
      fmt.Println("hello world, this is the first instruction")
      fmt.Println("hello world, this is the second instruction")
      fmt.Println("hello world, this is the Third instruction")
  }

Your Software will start from the main function from the top to until it reaches a closing bracket, executing each line in order.


* in which order the code is executed?

The same applies to secondary functions, e.g

    func sumTwoNumbers(n1, n2 int) int {
        return n1+n2
    }

    func main(){
        fmt.Println(sumTwoNumbers(1,2))
    }

it doesn't matter the order that functions were declared, but it does matter what is inside the brackets, and the order of execution in the main function

* What is a variable?

Variables are used to store values in the computer memory.

You can manipulate these values in your software by their labels (variable name) or by their address.

Think about *Excel* or *Google* *sheets*, you have cells, and you can store values in cells, you also have an address for cells.

*A12* is the address for a cell, which contains a value.

In the computer memory is the same thing, you have an alocated space for a value and an address for that space/value.

* Variable Types

In golang there are many variable types.

For now, we are going to stick with:
  *int* = for integer numbers like -1,0,1,2,3,4,5,6...
  *float32* = for rational numbers -1.3,1.2,3.4...
  *bool* = for true and false
  *string* = for text
  *error* = for errors

* Variable declaration

When using Go you can declare variables in two ways:

  var name string = "SomeName"
  
  or

  name := "SomeName"

* Final toughts

- A tour of Go (German) https://go-tour-de.appspot.com/welcome/1

* Final toughts

Youtube:
 - Just for func (https://www.youtube.com/channel/UC_BzFbxG2za3bp5NRRRXJSw)
 - https://gophercises.com/









