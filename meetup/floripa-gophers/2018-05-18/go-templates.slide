Floripa Gophers
Monitoramento automático usando Go templates

Thiago Trennepohl

* whoami
Thiago Trennepohl
Devops at Involves Tecnologia

@pohl_thiago
github.com/thiagotrennepohl


* Agenda
- O problema
- Solução
- Go templates
- Como a sulução funciona
- Apps que utilizam Go templates


* O problema - Muitos containers não monitorados


- Na época eram cerca de 200 clientes (1 container cada)
- Receitas do Chef para atualizar o monitoramento
- Um arquivo json para cada máquina
- Cerca de 400 Url's para monitorar


* O problema - Como eu me sentia

E era assim que eu me sentia quando um deploy novo era feito

.image work.gif

* Solução - Ei! como isso funciona?


- github.com/jwilder/nginx-proxy 
- Esse repositório é uma imagem do nginx que gera configuração automática
 docker run -d -e VIRTUAL_HOST=example.com my-image 
- github.com/jwilder/nginx-proxy 
- templates?
- To the docs batman!


* Solução - Overview de go templates
O pacote text/template permite renderizar texto e html baseados em dados.

Os templates são executados aplicando-os em uma estrutura de dados.

As anotações no template referem-se a  campos de uma estrutura ou valores de um map.

Para representar um valor em um template utiliza-se um "." e para controlar as estruturas
de dados é posível utilizar de alguns recursos de controle como:
if, range e reutilização de outros templates.


* Solução - Overview de go templates

.play demo.go /^func main/,/^}/

* Solução - Utilizando docker-gen
Se utiizarmos o docker-gen para gerar config
não precisamos mais do chef!

.image smart.gif

* Solução - Renan o mago dos templates

.image renan.jpeg 300 300

* Solução - Renan o mago dos templates

  - targets:
  {{ range $index, $value := $ }}
  {{ if $value.Env.VIRTUAL_HOST }}
  {{ if $value.Env.SHARED }}
  {{ range $index, $fqdn := split $value.Env.VIRTUAL_HOST "," }}
    - {{ $fqdn }}
    - {{ $fqdn }}/sistema/status/acao.action
  {{ end }}
  {{ else }}
    - {{ $value.Env.VIRTUAL_HOST }}
    - {{ $value.Env.VIRTUAL_HOST }}/sistema/status/acao.action
  {{ end }}
  {{ end }}
  {{ end }}


* Solução - Solução final

.image diagram.jpg 500 700

* Como a solução funciona

Basicamente o docker-gen conecta na api do Docker roda um inspect nos containers
e renderiza um arquivo de texto de acordo com 
a configuração e o template que você especificou.


* Como a solução funciona

E para cada container ele joga as informações em uma variável do tipo: 

 RuntimeContainers

* Como a solução funciona

Struct que o foi criada especificamente para isso.

    type RuntimeContainer struct {
        ID           string
        Addresses    []Address
        Networks     []Network
        Gateway      string
        Name         string
        Hostname     string
        Image        DockerImage
        Env          map[string]string
        Volumes      map[string]Volume
        Node         SwarmNode
        Labels       map[string]string
        IP           string
        IP6LinkLocal string
        IP6Global    string
        Mounts       []Mount
        State        State
    }

* Como a solução funciona

Depois que ele pega todas as informações de tudo, sério tudo desde rede até volumes.
É feito um range em todas as configurações especificadas e para cada configuração é criado um arquivo.

    func (g *generator) generateFromContainers() {
        containers, err := g.getContainers()
        if err != nil {
            log.Printf("Error listing containers: %s\n", err)
            return
        }
        for _, config := range g.Configs.Config {
            changed := GenerateFile(config, containers)
            if !changed {
                log.Printf("Contents of %s did not change. Skipping notification '%s'", config.Dest, config.NotifyCmd)
                continue
            }
            g.runNotifyCmd(config)
            g.sendSignalToContainer(config)
        }
    }

* Como a solução funciona

Mas no fim, o tmpl.ExecuteTemplate é o que reina!

    func executeTemplate(templatePath string, containers Context) []byte {
        tmpl, err := newTemplate(filepath.Base(templatePath)).ParseFiles(templatePath)
        if err != nil {
            log.Fatalf("Unable to parse template: %s", err)
        }

        buf := new(bytes.Buffer)
        err = tmpl.ExecuteTemplate(buf, filepath.Base(templatePath), &containers)
        if err != nil {
            log.Fatalf("Template error: %s\n", err)
        }
        return buf.Bytes()
    }

* Como a solução funciona

Wait! mas esse newTemplate não é uma função do pacote template!

* Como a solução funciona
Não é mesmo, a função newTemplate retorna um template
só que com muitas funções criadas para ajudar a filtrar,
procurar e agrupar os dados

 ** Mostrar código super grande ** 

* O que mais usa Go templates? - Present

- Esta ferramenta maravilhosa de slides
- Hugo - ferramenta de Blogs
- Alguns web frameworks!


